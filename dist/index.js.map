{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as request from 'request';\r\nimport * as _ from 'lodash';\r\nimport {Logger} from './lib/Logger';\r\nconst logger = new Logger();\r\nconst flowUrl = 'https://api.flowdock.com/messages';\r\nconst DEFAULT_WARNING_THRESHOLD = 85;\r\nconst DEFAULT_FAILURE_THRESHOLD = 75;\r\n\r\nconst REQUIRED = ['token', 'author', 'threadId', 'threadTitle'];\r\n\r\n/*\r\n {\r\n   token: '<TOKEN>',\r\n   author: {\r\n     name: 'Sweeney Jenkins',\r\n     avatar: 'https://github.build.ge.com/avatars/u/23999?s=466',\r\n     email: 'Service.SweeneyJenkins@ge.com'\r\n   },\r\n   threadId: 'cr-it-results',\r\n   threadTitle: 'Config Reviewer IT Results',\r\n   resultsUrl: http://whatever.com,\r\n   warningThreshold: 85,\r\n   failureThreshold: 75\r\n }\r\n */\r\nexport class BusybeeFlowdockReporter {\r\n  private conf: any;\r\n  private warningThreshold: number;\r\n  private failureThreshold: number;\r\n  skipInLocalMode: boolean;\r\n\r\n  constructor(conf) {\r\n    this.conf = conf;\r\n    this.skipInLocalMode = conf.skipInLocalMode;\r\n    this.warningThreshold = conf.warningThreshold || DEFAULT_WARNING_THRESHOLD;\r\n    this.failureThreshold = conf.failureThreshold || DEFAULT_FAILURE_THRESHOLD;\r\n\r\n    let failures = [];\r\n    REQUIRED.forEach(key => {\r\n      if (!conf[key]) {\r\n        failures.push(key);\r\n      }\r\n    });\r\n\r\n    if (failures.length > 0) {\r\n      if (failures.length === 1) {\r\n        throw  new Error(`'${failures[0]}' is a required configuration key`);\r\n      } else {\r\n        throw new Error(`'${failures.join(',')}' are required configuration keys`);\r\n      }\r\n    }\r\n  }\r\n\r\n  run(testSuiteResults: any) {\r\n    let restSuites = _.filter(testSuiteResults, ts => { return ts.type === 'REST'; });\r\n\r\n    let body = ''; // full Flowdock message body\r\n    let globalCount = 0;\r\n    let globalPass = 0;\r\n    restSuites.forEach(testSuite => {\r\n      let tsCount = 0; // total tests in testSuite\r\n      let tsPass = 0; // total pass for testSuite\r\n      testSuite.testSets.forEach(testSet => {\r\n        testSet.tests.forEach(t => {\r\n          tsCount += 1;\r\n          if (t.pass) {\r\n            tsPass += 1;\r\n          }\r\n        });\r\n      });\r\n\r\n      // build summary message for this testSuite\r\n      let tsScore = Math.round(tsPass / tsCount * 100);\r\n      let color = this.determineStatusColor(tsScore);\r\n      body += `<span style='color:${color};'>${testSuite.id} Complete With ${tsScore}% Passing</span><br/>`\r\n      globalCount += tsCount;\r\n      globalPass += tsPass;\r\n    });\r\n\r\n    // summarize the complete results and create the message title\r\n    let statusValue = 'PASSED';\r\n    let globalScore = Math.round(globalPass / globalCount * 100);\r\n    let statusColor = this.determineStatusColor(globalScore);\r\n    if (statusColor == 'yellow') {\r\n      statusValue = 'UNSTABLE';\r\n    } else if (statusColor == 'red') {\r\n      statusValue = 'FAILING';\r\n    }\r\n\r\n    let payload = {\r\n      author: this.conf.author,\r\n      flow_token: this.conf.token,\r\n      event: 'activity',\r\n      title: `All Suites Complete with ${globalPass}/${globalCount} (${globalScore}%) Passing`,\r\n      body: body,\r\n      external_thread_id: this.conf.threadId,\r\n      thread: {\r\n        title: this.conf.threadTitle,\r\n        status: {\r\n          color: statusColor,\r\n          value: statusValue\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.conf.resultsUrl) {\r\n        payload.body = `<a href='${this.conf.resultsUrl}'>${payload.body}</a>`;\r\n    }\r\n\r\n    try {\r\n      this.send(payload);\r\n    } catch (e) {\r\n      logger.error(e.message);\r\n      throw new Error(`Error publishing test results to Flowdock`);\r\n    }\r\n\r\n  }\r\n\r\n  send(payload) {\r\n    logger.debug(`sending to flowdock`);\r\n    logger.debug(payload);\r\n    request.post({url: flowUrl, body: payload, json: true});\r\n  }\r\n\r\n  determineStatusColor(score) {\r\n    let statusColor = 'green';\r\n    if (score < this.warningThreshold) {\r\n      if (score < this.failureThreshold) {\r\n        statusColor = 'red';\r\n      } else {\r\n        statusColor = 'yellow';\r\n      }\r\n    }\r\n\r\n    return statusColor;\r\n  }\r\n}\r\n"]}